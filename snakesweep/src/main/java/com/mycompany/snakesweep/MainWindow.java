/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.snakesweep;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Nathan Dow
 */
public class MainWindow extends javax.swing.JFrame {

    private Square[][] grid;
    private int gridWidth;
    private int gridHight;
    private boolean gameOver;
    private boolean win;
    private int numBombs;
    private int flags;
    private int correctBombs;
    private double difficulty;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        
        initComponents();
        initGrid();
        gameOver = false;
        win = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grid_panel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        difficultySlider_label = new javax.swing.JLabel();
        difficulty_slider = new javax.swing.JSlider();
        columnSlider_label = new javax.swing.JLabel();
        column_slider = new javax.swing.JSlider();
        rows_slider = new javax.swing.JSlider();
        rowSlider_label = new javax.swing.JLabel();
        newGame_button = new javax.swing.JButton();
        timer_textField = new javax.swing.JTextField();
        timer_label = new javax.swing.JLabel();
        remainingBobmbs_label = new javax.swing.JLabel();
        remaningBombs_textField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        grid_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout grid_panelLayout = new javax.swing.GroupLayout(grid_panel);
        grid_panel.setLayout(grid_panelLayout);
        grid_panelLayout.setHorizontalGroup(
            grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        grid_panelLayout.setVerticalGroup(
            grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 554, Short.MAX_VALUE)
        );

        difficultySlider_label.setText("Difficulty");

        difficulty_slider.setMaximum(3);
        difficulty_slider.setValue(2);

        columnSlider_label.setText("Column");

        column_slider.setMinimum(3);
        column_slider.setToolTipText("");
        column_slider.setValue(32);

        rows_slider.setMinimum(3);
        rows_slider.setValue(16);

        rowSlider_label.setText("Rows");

        newGame_button.setText("New Game");
        newGame_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGame_buttonActionPerformed(evt);
            }
        });

        timer_textField.setText("jTextField2");

        timer_label.setText("Timer");

        remainingBobmbs_label.setText("Remaining Bombs");

        remaningBombs_textField.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remainingBobmbs_label, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remaningBombs_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(difficultySlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(difficulty_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rowSlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(columnSlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(column_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rows_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timer_label, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timer_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(130, 130, 130)
                        .addComponent(newGame_button)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(newGame_button)
                                .addGap(7, 7, 7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rowSlider_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(remainingBobmbs_label))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(rows_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(columnSlider_label)
                            .addComponent(column_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remaningBombs_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(difficultySlider_label)
                            .addComponent(difficulty_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(timer_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timer_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(grid_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grid_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGame_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGame_buttonActionPerformed
       //Make new instance of the jPanel
       
        //clears the panel of the old grid
        grid_panel.removeAll();
          
        //New initComponents
        grid_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout grid_panelLayout = new javax.swing.GroupLayout(grid_panel);
        grid_panel.setLayout(grid_panelLayout);
        grid_panelLayout.setHorizontalGroup(
            grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 770, Short.MAX_VALUE)
        );
        grid_panelLayout.setVerticalGroup(
            grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
       javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remainingBobmbs_label, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remaningBombs_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(difficultySlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(difficulty_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rowSlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(columnSlider_label, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(column_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rows_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timer_label, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timer_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(130, 130, 130)
                        .addComponent(newGame_button)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(newGame_button)
                                .addGap(7, 7, 7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(rowSlider_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(remainingBobmbs_label))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(rows_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(columnSlider_label)
                            .addComponent(column_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(remaningBombs_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(difficultySlider_label)
                            .addComponent(difficulty_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(timer_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timer_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(grid_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grid_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        
        initGrid();
        gameOver = false;
        win = false;  
    }//GEN-LAST:event_newGame_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel columnSlider_label;
    private javax.swing.JSlider column_slider;
    private javax.swing.JLabel difficultySlider_label;
    private javax.swing.JSlider difficulty_slider;
    private javax.swing.JPanel grid_panel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton newGame_button;
    private javax.swing.JLabel remainingBobmbs_label;
    private javax.swing.JTextField remaningBombs_textField;
    private javax.swing.JLabel rowSlider_label;
    private javax.swing.JSlider rows_slider;
    private javax.swing.JLabel timer_label;
    private javax.swing.JTextField timer_textField;
    // End of variables declaration//GEN-END:variables

    private void initGrid() {
        // build a grid of squares so that we can inecalize each Sqare as an object
        
        difficulty = difficulty_slider.getValue();
        if(difficulty == 3) difficulty = .3;
        else if(difficulty == 2) difficulty = .2;
        else if(difficulty == 1) difficulty = .1;
        else if(difficulty == 0) difficulty = .05;
        
        gridHight = rows_slider.getValue();
        gridWidth = column_slider.getValue();
        
        grid = new Square[gridHight][gridWidth];
        
        for(int r = 0; r < gridHight; r++){
            for(int c = 0; c < gridWidth; c ++){
                
                grid[r][c] = new Square(r,c);
            }
        }
        
        numBombs = 0;
        
        System.out.println(difficulty);
        int targetBombs = (int)(gridHight * gridWidth * difficulty);
        
        
        
        while(numBombs < targetBombs){
            int r = (int)(Math.random()*(gridHight));
            int c = (int)(Math.random()*(gridWidth));
            
            if(grid[r][c].getNumBombs() != 9){
                grid[r][c].setNumBombs(9);
                numBombs++;
            }
            
        }
        flags = numBombs;
        // ============================= To Do - Assignment 2 ========================
        
        // Ramdomly add bombs to the squares
        //Set a square as a bomb by setting it's instance varible to 9
        // Standard Difficulty Level = 19% bombs
        
        // ============================= To Do - Assignment 2 ========================
        
        
        
        //Varify that bobs are assigned correctly
        setBombCount();
        
        printGrid();
        buildGUI();
        
        setBombRemaining();
        
    }

    private void printGrid() {
        
        for(Square[] row : grid){
                
                for(Square index : row){
                    System.out.print(index.getNumBombs() + " ");
                }
                
              System.out.println();
        }
        
    }
    
    private void setBombCount(){
        //Sets value of each Square
        for(int r = 0; r < gridHight; r++){
            for(int c = 0; c < gridWidth; c ++){
                if(grid[r][c].getNumBombs() != 9){
                   int squareNum = 0;
                    //sets up middle squares
                    if(r != gridHight-1 && c != gridWidth -1 && r != 0 && c!=0){
                        if(grid[r-1][c].getNumBombs() == 9) squareNum++;
                        if(grid[r][c - 1].getNumBombs() == 9) squareNum++;
                        if(grid[r - 1][c - 1].getNumBombs() == 9) squareNum++;
                        if(grid[r + 1][c].getNumBombs() == 9) squareNum++;
                        if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                        if(grid[r + 1][c + 1].getNumBombs() == 9) squareNum++;
                        if(grid[r - 1][c + 1].getNumBombs() == 9) squareNum++;
                        if(grid[r + 1][c - 1].getNumBombs() == 9) squareNum++; 
                        
                    } else{
                        
                        //sets up corners
                        if(r == gridHight-1 && c == gridWidth -1){
                            if(grid[r-1][c].getNumBombs() == 9) squareNum++;
                            if(grid[r][c - 1].getNumBombs() == 9) squareNum++;
                            if(grid[r - 1][c - 1].getNumBombs() == 9) squareNum++;
                            
                        }else if(r == 0 && c==0){
                            if(grid[r + 1][c].getNumBombs() == 9) squareNum++;
                            if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                            if(grid[r + 1][c + 1].getNumBombs() == 9) squareNum++;
                            
                        }else if(r == 0 && c== gridWidth -1){
                            if(grid[r][c-1].getNumBombs() == 9) squareNum++;
                            if(grid[r+1][c].getNumBombs() == 9) squareNum++;
                            if(grid[r + 1][c - 1].getNumBombs() == 9) squareNum++; 
                            
                        }else if(r == gridHight && c==0){
                            if(grid[r - 1][c].getNumBombs() == 9) squareNum++;
                            if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                            if(grid[r - 1][c + 1].getNumBombs() == 9) squareNum++; 
                            
                        } else{
                            if(r == 0){
                                if(grid[r][c - 1].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c + 1].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c - 1].getNumBombs() == 9) squareNum++; 
                            }
                            if(c == 0 && r != gridHight -1 && r != 0){
                                if(grid[r-1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c + 1].getNumBombs() == 9) squareNum++;
                                if(grid[r - 1][c + 1].getNumBombs() == 9) squareNum++;
                                

                            }
                            if(r == gridHight -1 && c!=0 && c!= gridWidth){
                                if(grid[r-1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r][c - 1].getNumBombs() == 9) squareNum++;
                                if(grid[r - 1][c - 1].getNumBombs() == 9) squareNum++;
                                if(grid[r][c + 1].getNumBombs() == 9) squareNum++;
                                if(grid[r - 1][c + 1].getNumBombs() == 9) squareNum++;
                                 

                            }
                            if(c == gridWidth -1){
                                if(grid[r-1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r][c - 1].getNumBombs() == 9) squareNum++;
                                if(grid[r - 1][c - 1].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c].getNumBombs() == 9) squareNum++;
                                if(grid[r + 1][c - 1].getNumBombs() == 9) squareNum++; 

                            }
                             
                        }
                        
                    }
                    grid[r][c].setNumBombs(squareNum); 
                }
                
            }
        }
    }
    private int getNumBombs(int r, int c){
        //returns the value of the squre at grid[r][c]
        return 0;
    }

    private void buildGUI() {
        /* This Builds all of the GUI assets to the start a new game.
            - Create a Layout Manager so that sqares can be manually added to the GUI
            - Creates a MouseListiner to captur mose events
                * Left Clift : Uncover a tile
                * Right Click : mark a tile with a flag
                * Detects the source of the clicks
            - Create a Constranists for each Square, then add the Square to the GUI
              using the add(item, constraints) calls
        */
        
        // Create GridBaylayot with all  so that squares can be places in a grid
        // with x and y corridinates
        
        grid_panel.setLayout(new GridBagLayout());
        
        //Create a MouseListener so that the program will detect the clicked source
        // the clicked source, and left/right mouse click
        MouseListener listener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) { 
                mouseActionPreformed(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {}

            @Override
            public void mouseReleased(MouseEvent e) {}

            @Override
            public void mouseEntered(MouseEvent e) {}

            @Override
            public void mouseExited(MouseEvent e) {}

            
        };
        
        // loop through the grid to get the square, bulid contraints, and add
        // to the gridPanel
        for(int r = 0; r < gridHight; r++){
            for(int c = 0; c < gridWidth; c ++){
                
                GridBagConstraints constraints = new GridBagConstraints();
                
                constraints.gridx = c;
                constraints.gridy = r;
                constraints.weightx = 0;
                constraints.weighty = 0;
                
                //Add theMouslestere to the Square
                grid[r][c].addMouseListener(listener);
                
                
  
                //Add the Square to the gridpanel using the contains
                grid_panel.add(grid[r][c], constraints);
            }
        }
        
    }
    
    
    private void mouseActionPreformed(MouseEvent e) {
        
        /*
        Method will handle the mouse clicks for each square.
        Using the MoseEvent oject, the method
            - Get the square of the click
            -Get the button that was clicked
                *Left Clicked - call the clearSquare(x,y)
                *Right Clicked - toggle the tile witha bomb image
                 If the bomb is marked, disable left click
                 If the bomb is not marked mark it as a flag
        */
        
        
        //Creates a square from the clicked source
        
        if(gameOver == true){
            return;
        }
        Square square = (Square) e.getSource();
        
        //Get the mouse button that is clicked
        // 0 - No Button clicked
        // 1 - Button - Left Cilck
        // 2 - Botton 2 - Mouse Wheel
        // 3 - Botton 3 - Right click
        int button = e.getButton();
        
       
        System.out.println("Mouse clicked");
        if(button == MouseEvent.BUTTON1 && !square.isFlag()){
            
            // more things to it
            clearSquares(square.getGridX(), square.getGridY());
            System.out.println("Left click enabled and working");
            
        } else if(button == MouseEvent.BUTTON3){
            //Toggle the square's tile to a flage or no flag
            //Disable the left click if the tile is marked with a flag.
            //Enable the left click if the tile is not marked with a flag
            if (!square.isFlag()){
                square.setFlag(true);
                flags --;
                square.setIcon(new ImageIcon("images\\flag.gif"));
            }else{
                square.setFlag(false);
                flags ++;
                square.setIcon(new ImageIcon("images\\tile.gif"));
            }
            setBombRemaining();
            
            correctBombs = 0;
            
            for(int r = 0; r < gridHight; r++){
                for(int c = 0; c < gridWidth; c ++){ 
                    if (grid[r][c].getNumBombs() == 9 && grid[r][c].isFlag() == true){
                        correctBombs ++;
                    }
                }
            }
            if (flags == 0 && correctBombs == numBombs){
                win = true;
                gameOver();
            }
        }
    }

    private void clearSquares(int x, int y) {
       //Clears all of the adjecent squares that have a nomber or empty
       if(x >= 0 && x < gridHight && y >= 0 && y < gridWidth && grid[x][y].isCovered()){
           
           if(!grid[x][y].isFlag()){
               grid[x][y].setCovered(false); // check
           }
           
           if (grid[x][y].getNumBombs() == 9){
               gameOver();
               grid[x][y].setIcon(new ImageIcon("images\\9.gif"));
               return;
           }
           
           if(grid[x][y].getNumBombs() > 0){
               grid[x][y].setIcon(new ImageIcon("images\\" + grid[x][y].getNumBombs() + ".gif"));
               return;
           }
           clearSquares(x-1, y);
           clearSquares(x, y - 1);
           clearSquares(x - 1, y - 1);
           clearSquares(x + 1, y);
           clearSquares(x, y + 1);
           clearSquares(x + 1, y + 1);
           clearSquares(x - 1, y + 1);
           clearSquares(x + 1, y - 1);
           
           
           if(grid[x][y].getNumBombs() == 0){
               grid[x][y].setIcon(new ImageIcon("images\\0.gif"));
           }
       }      
    }
    private void gameOver(){
        this.gameOver = true;
        for(int r = 0; r < gridHight; r++){
            for(int c = 0; c < gridWidth; c ++){
                grid[r][c].setIcon(new ImageIcon("images\\" + grid[r][c].getNumBombs() + ".gif"));
            }
        }
        if(win){
            JOptionPane.showMessageDialog(null, "You Win");
        }
        else{
            JOptionPane.showMessageDialog(null, "Game Over");
        }

    }
    private void setBombRemaining(){
        remaningBombs_textField.setText("" + flags);
    }
    
}
